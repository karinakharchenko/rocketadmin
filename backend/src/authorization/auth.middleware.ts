import { HttpException, HttpStatus, Injectable, NestMiddleware } from '@nestjs/common';
import { Request, Response } from 'express';
import { MockFactory } from '../../test/mock.factory';
import * as jwt from 'jsonwebtoken';
import { Messages } from '../exceptions/text/messages';
import { isObjectEmpty } from '../helpers';
import { Constants } from '../helpers/constants/constants';
import { getRepository } from 'typeorm';
import { LogOutEntity } from '../entities/log-out/log-out.entity';
import { UserEntity } from '../entities/user/user.entity';

/**
 * Middleware for perform verification on JWT token generated by AWS cognito.
 **/
@Injectable()
export class AuthMiddleware implements NestMiddleware {
  async use(req: Request, res: Response, next: (err?: any, res?: any) => void): Promise<void> {
    console.log(`auth middleware triggered ->: ${new Date().toISOString()}`);
    let token: string;
    try {
      token = req.cookies[Constants.JWT_COOKIE_KEY_NAME];
    } catch (e) {
      if (process.env.NODE_ENV !== 'test') {
        throw new HttpException(
          {
            message: 'JWT verification failed',
          },
          HttpStatus.UNAUTHORIZED,
        );
      }
    }
    if (process.env.NODE_ENV === 'test' && !token) {
      req = MockFactory.getDecodedInfo(req);
      next();
      return;
    }

    if (!token) {
      throw new HttpException('Token is missing', HttpStatus.UNAUTHORIZED);
    }

    const logOutRepository = await getRepository(LogOutEntity);
    const isLoggedOut = await logOutRepository.findOne({ jwtToken: token });
    if (isLoggedOut) {
      throw new HttpException(
        {
          message: 'JWT verification failed',
        },
        HttpStatus.UNAUTHORIZED,
      );
    }

    try {
      const jwtSecret = process.env.JWT_SECRET;
      const data = jwt.verify(token, jwtSecret);
      const userId = data['id'];
      if (!userId) {
        throw new Error('JWT verification failed');
      }
      const userRepository = await getRepository(UserEntity);
      const foundUser = await userRepository.findOne({ id: userId });
      if (!foundUser) {
        throw new HttpException(
          {
            message: Messages.USER_NOT_FOUND,
          },
          HttpStatus.UNAUTHORIZED,
        );
      }
      const payload = {
        sub: userId,
        email: data['email'],
        exp: data['exp'],
        iat: data['iat'],
      };
      if (!payload || isObjectEmpty(payload)) {
        throw new Error('JWT verification failed');
      }
      req['decoded'] = payload;
      next();
    } catch (e) {
      throw new HttpException(
        {
          message: Messages.AUTHORIZATION_REJECTED,
        },
        HttpStatus.UNAUTHORIZED,
      );
    }
  }
}
